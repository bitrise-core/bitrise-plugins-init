package detectors

import (
	"fmt"
	"os"
	"path"
	"path/filepath"
	"regexp"
	"strings"

	log "github.com/Sirupsen/logrus"
)

const (
	xcodeprojExtension   = ".xcodeproj"
	xcworkspaceExtension = ".xcworkspace"
	podFileBasePath      = "Podfile"
	schemeFileExtension  = ".xcscheme"
)

//--------------------------------------------------
// Utility
//--------------------------------------------------

func filterXcodeprojectFiles(fileList []string) []string {
	filteredFiles := filterFilesWithExtensions(fileList, xcodeprojExtension, xcworkspaceExtension)

	relevantFiles := []string{}
	workspaceEmbeddedInProjectExp := regexp.MustCompile(`.+.xcodeproj/.+.xcworkspace`)
	podProjectExp := regexp.MustCompile(`.*/Pods/.+.xcodeproj`)

	for _, file := range filteredFiles {
		isWorkspaceEmbeddedInProject := false
		if workspaceEmbeddedInProjectExp.FindString(file) != "" {
			isWorkspaceEmbeddedInProject = true
		}

		isPodProject := false
		if podProjectExp.FindString(file) != "" {
			isPodProject = true
		}

		if !isWorkspaceEmbeddedInProject && !isPodProject {
			relevantFiles = append(relevantFiles, file)
		} else {
			log.Debugf("Disclude: %s", file)
		}
	}

	return relevantFiles
}

func filterPodFiles(fileList []string) []string {
	filteredFiles := filterFilesWithBasPaths(fileList, podFileBasePath)
	relevantFiles := []string{}

	for _, file := range filteredFiles {
		if strings.Contains(file, ".git/") {
			log.Debugf("Disclude: %s", file)
		} else {
			relevantFiles = append(relevantFiles, file)
		}
	}

	return relevantFiles
}

func filterSchemes(fileList []string, project string) []string {
	filteredFiles := filterFilesWithExtensions(fileList, schemeFileExtension)
	projectScharedSchemesDir := path.Join(project, "xcshareddata/xcschemes/")

	schemeFiles := []string{}
	for _, file := range filteredFiles {
		if strings.HasPrefix(file, projectScharedSchemesDir) {
			schemeFiles = append(schemeFiles, file)
		}
	}

	schemes := []string{}
	for _, schemeFile := range schemeFiles {
		scheme := filepath.Base(schemeFile)
		schemes = append(schemes, scheme)
	}

	return schemes
}

func isValidProject() {

}

//--------------------------------------------------
// Main
//--------------------------------------------------

// DetectIOS ...
func DetectIOS() error {
	searchDir := "/Users/godrei/Develop/iOS/cardstore"
	// searchDir = "./"

	fileList, err := fileList(searchDir)
	if err != nil {
		return fmt.Errorf("failed to search for files in (%s), error: %s", searchDir, err)
	}

	// Search for xcodeproj/xcworkspace file
	xcodeProjectFiles := filterXcodeprojectFiles(fileList)

	log.Debugf("%s/%s files:", xcodeprojExtension, xcworkspaceExtension)
	for _, xcodeProjectFile := range xcodeProjectFiles {
		log.Debugf("  %s", xcodeProjectFile)
	}
	log.Debugln("")

	if len(xcodeProjectFiles) == 0 {
		log.Infof("NO iOS project detected")
		return nil
	}

	log.Infof("iOS project detected")
	fmt.Println()

	// Check for Podfiles
	podFiles := filterPodFiles(fileList)

	log.Debugf("%s files:", podFileBasePath)
	for _, podFile := range podFiles {
		log.Debugf("  %s", podFile)
	}
	log.Debugln("")

	if len(podFiles) == 0 {
		log.Infof("NO podfile detected")
		return nil
	}

	log.Infof("Podfile detected")
	fmt.Println()

	workspaceMap := map[string]string{}
	for _, podFile := range podFiles {
		if err := os.Setenv("pod_file_path", podFile); err != nil {
			return err
		}

		podfileWorkspaceMap, err := getWorkspaces()
		if err != nil {
			return err
		}

		for workspace, project := range podfileWorkspaceMap {
			workspaceMap[workspace] = project
		}
	}

	// Inspect projects
	configMap := map[string][]string{}

	validProjects := []string{}
	for _, project := range xcodeProjectFiles {
		log.Infof("Inspecting project file: %s", project)
		_, found := workspaceMap[project]

		if found {
			log.Info(" Workspace will be generated by CocoaPods")
			for _, linkedProject := range workspaceMap {
				if linkedProject == project {
					validProjects = append(validProjects, project)
				}
			}
		} else {
			validProjects = append(validProjects, project)
		}
	}

	for _, project := range validProjects {
		schemes := filterSchemes(fileList, project)

		if len(schemes) == 0 {
			log.Infof("No shared scheme found")
			continue
		}

		configMap[project] = schemes
	}
	fmt.Println()

	for path, configs := range configMap {
		log.Infof("Configurations for %s", path)
		fmt.Println()
		for _, config := range configs {
			log.Infof("  %s", config)
		}
		fmt.Println()
	}

	return nil
}

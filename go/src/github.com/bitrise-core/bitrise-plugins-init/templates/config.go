package templates

// BitriseSecretsTemplate ...
const BitriseSecretsTemplate = `envs:
- MY_HOME: $HOME
- MY_SECRET_PASSWORD: XyZ
  opts:
    # You can include some options as well if you
    #  want to change how the value is passed to a command.
    is_expand: no
    # For example you can use is_expand: no
    #  if you want to make it sure that
    #  the value is preserved as-it-is, and won't be
    #  expanded before use.
    # For example if your password contains the dollar sign ($)
    #  it would (by default) be expanded as an environment variable,
    #  just like $HOME would be expanded/replaced with your home
    #  directory path.
    # You can prevent this with is_expand: no
`

// BitriseConfigTemplate ...
const BitriseConfigTemplate = `format_version: {{.FormatVersion}}
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

title: Template configuration.
summary: |-
  Template 'bitrise.yml', generated by 'bitrise init'.
description: |-
  Configuration (environments) specified in 'app' will be available
    for every workflow.

  The Trigger Map ('trigger_map') defines mapping between trigger patterns
    and workflows.
  You can run workflows directly with bitrise: bitrise run workflow-name
    Or you can 'trigger' a build: bitrise trigger some-pattern

   With this example 'trigger_map' if you 'bitrise trigger test'
    or 'bitrise trigger test-1' or specify any other pattern
    which starts with 'test' then the 'test' workflow will be used.
   In any other case (ex: 'bitrise trigger something-else') the
    workflow called 'fallback' will be used.

  Workflows ('workflows') are where you can define different, separate scenarios,
    which you can then 'bitrise run' or 'bitrise trigger'.

app:
  envs:
  - BITRISE_APP_TITLE: "{{.AppTitle}}"
  - BITRISE_DEV_BRANCH: "{{.DevBranch}}"

trigger_map:
- pattern: test**
  is_pull_request_allowed: true
  workflow: test
- pattern: "*"
  is_pull_request_allowed: true
  workflow: fallback

workflows:
  test:
    description: |-
      You can use this workflow by running: bitrise run test
      Or by triggering: bitrise trigger test
      If you use trigger, you can trigger it with any pattern
        which starts with 'test', like: bitrise trigger test-1
        or: bitrise trigger test/1
      You can define the mapping between trigger patterns and
        workflows in the 'trigger_map' section.
    steps:
    - timestamp:
        outputs:
        - UNIX_TIMESTAMP:
        - ISO_DATETIME:
    - script:
        title: Hello Bitrise!
        inputs:
        - content: |-
            #!/bin/bash
            echo "Welcome to Bitrise!"
            echo "Current time is: ${ISO_DATETIME}"
            echo
            echo "Your specified Project Title is: ${BITRISE_APP_TITLE}"
            echo " and the primary development branch is: ${BITRISE_DEV_BRANCH}"
  fallback:
    description: |-
      This is a fallback workflow. As defined in the 'trigger_map' section
      this workflow will be selected in any case if you run 'bitrise trigger'
      with any pattern which does not match any other in
      the 'tigger_map' definition. For example 'bitrise trigger my-custom-pattern'
      or 'bitrise trigger my/custom/pattern' will both select this workflow.
    steps:
    - script:
        title: Fallback
        inputs:
        - content: |-
            #!/bin/bash
            echo "This is a the fallback workflow, used"
            echo " if you 'bitrise trigger' a build but the pattern"
            echo " does not match any other pattern in the trigger_map"
`
